import kfp
from kfp import dsl
from kfp.components import func_to_container_op

@func_to_container_op
def show_metrics(neural_network : float, convolutional_nn : float) -> None:
    # Given the outputs from decision_tree and logistic regression components
    # the results are shown.

    print(f"Decision tree (accuracy): {neural_network}")
    print(f"Logistic regression (accuracy): {convolutional_nn}")


@dsl.pipeline(name='Pipeline', description='Applies Neural Network and Convolutional Neural Network for classification problem.')
def pipeline():

    # Loads the yaml manifest for each component
    get_data = kfp.components.load_component_from_file('get_data/get_data.yaml')
    neural_network = kfp.components.load_component_from_file('neural_network/neural_network.yaml')
    convolutional_nn = kfp.components.load_component_from_file('convolutional_nn/convolutional_nn.yaml')

    # Run get_data task
    get_data_task = get_data()

    # Run tasks "neural_network" and "convolutional_nn" given
    # the output generated by "get_data_task".
    neural_network_task = neural_network(get_data_task.output)
    convolutional_nn_task = convolutional_nn(get_data_task.output)

    # Given the outputs from "neural_network" and "convolutional_nn"
    # the component "show_results" is called to print the results.
    show_metrics(neural_network_task.output, convolutional_nn_task.output)


if __name__ == '__main__':
    kfp.compiler.Compiler().compile(pipeline, 'pipeline.yaml')